name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    types: [ "opened", "reopened", "synchronize", "ready_for_review" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false # ensure we don't stop after 1 failure to always have a complete picture of what is failing

      # Set up a matrix to run the following configurations:
      # - ubuntu Debug/Release clang/gcc
      # - windows Debug/Release cl
      # - macos Debug/Release clang
      matrix:
        os: [ubuntu-latest, macos-latest] # , windows-latest
        build_type: [Release, Debug]
        c_compiler: [gcc-13, clang-15, cl]
        include:
          # - os: windows-latest
          #   c_compiler: cl
          #   cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc-13
            cpp_compiler: g++-13
          - os: ubuntu-latest
            c_compiler: clang-15
            cpp_compiler: clang++-15
          - os: macos-latest
            c_compiler: gcc-13
            cpp_compiler: g++-13
        exclude:
          - os: windows-latest
            c_compiler: gcc-13
          - os: windows-latest
            c_compiler: clang-15
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: clang-15

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Cache VCPKG (Windows)
      if: runner.os == 'Windows'
      uses: actions/cache@v3
      with:
        path: ${{ env.VCPKG_ROOT }}
        key: ${{ runner.os }}-${{ matrix.build_type }}-${{ hashFiles('vcpkg.json') }}

    - name: Install OpenSSL (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "CMAKE_TOOLCHAIN_FILE=${env:VCPKG_INSTALLATION_ROOT}\scripts\buildsystems\vcpkg.cmake" | Out-File -FilePath $env:GITHUB_ENV -Append
        vcpkg install

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DLIBFSP_BUILD_TESTS=TRUE
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }} --test-dir tests
